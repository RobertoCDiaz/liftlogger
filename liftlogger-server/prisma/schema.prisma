// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

// The User table stores information about users of the application.
// Each user is identified by their email address, which is used as the primary key.
// The table has relationships to other tables in the schema, including MuscleGroup, Movement,
// Template, and LiftingSession.
model User {
  email String @id @db.VarChar(255)

  groups     MuscleGroup[]
  movements  Movement[]
  templates  Template[]
  sessions   LiftingSession[]
  weightings Weighting[]
  notes      Note[]

  @@map("users")
}

// Weighting data, usually retrieved from a physical weightscale.
// You can choose to ignore some registers by setting `ignored` to true, so that those are not
// taken into account to critical computations.
model Weighting {
  id                 Int      @id @default(autoincrement())
  datetime           DateTime
  weight             Float
  fat_percentage     Float
  muscle_mass        Float
  water_percentage   Float?
  protein_percentage Float?
  metabolism         Float?
  visceral_fat       Float?
  ignored            Boolean  @default(false)
  user_email         String

  user User @relation(fields: [user_email], references: [email])

  @@map("weightings")
}

// The MuscleGroup table stores information about different muscle groups, such as chest, back,
// legs, etc.
// Each muscle group can have subgroups, which are stored in the groups field.
// Each muscle group can also belong to a parent group, which is stored in the parent_group field.
// The group_movements field is used to store the movements associated with a muscle group.
// Finally, each muscle group belongs to a user, which is stored in the user field.
model MuscleGroup {
  id              Int     @id @default(autoincrement())
  name            String  @db.VarChar(255)
  description     String? @db.Text
  user_email      String
  parent_group_id Int?

  groups       MuscleGroup[] @relation("subgroups")
  parent_group MuscleGroup?  @relation("subgroups", fields: [parent_group_id], references: [id])
  movements    Movement[]
  user         User          @relation(fields: [user_email], references: [email])

  @@map("musclegroups")
}

// The Movement table stores information about different weightlifting movements, such as bench
// press, squats, deadlifts, etc.
// Each movement has a name and an optional description.
model Movement {
  id               Int     @id @default(autoincrement())
  name             String  @db.VarChar(255)
  description      String? @db.Text
  user_email       String
  primary_group_id Int?

  sets      LiftingSet[]
  notes     MovementNote[]
  groups    MuscleGroup[]
  templates MovementToTemplate[]
  user      User                 @relation(fields: [user_email], references: [email])

  @@map("movements")
}

// The Template table stores information about lifting templates, which are pre-defined sets of
// movements and rep/weight schemes.
// Each template has a name and an optional description.
model Template {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  user_email  String

  movements MovementToTemplate[]
  user      User                 @relation(fields: [user_email], references: [email])

  @@map("templates")
}

// Holds the M:M relationships between what Movements are part of which Templates.
// It is made an explicit relationship to also hold the `position` property, which indicates the
// order in which the Movements should appear in the Template.
model MovementToTemplate {
  movement_id Int
  template_id Int
  position    Int

  movement Movement @relation(fields: [movement_id], references: [id])
  template Template @relation(fields: [template_id], references: [id])

  @@id([movement_id, template_id])
  @@map("movements_to_templates")
}

// The LiftingSession table stores information about weightlifting sessions.
// Each session has a start time, an end time, and an optional note.
model LiftingSession {
  id         Int      @id @default(autoincrement())
  start_time DateTime
  end_time   DateTime
  notes      String?  @db.Text
  user_email String

  user User         @relation(fields: [user_email], references: [email])
  sets LiftingSet[]

  @@map("lifting_sessions")
}

// The LiftingSet table stores information about individual sets performed during a lifting
// session. Each set has a start time, an end time, a movement, a number of reps, a weight,
// and an optional note.
// The movement field is used to associate the set with a specific movement, and the session
// field is used to associate the set with a specific lifting session.
model LiftingSet {
  id          Int      @id @default(autoincrement())
  movement    Movement @relation(fields: [movement_id], references: [id])
  movement_id Int
  reps        Int
  weight      Float    @default(1)
  session_id  Int

  session LiftingSession @relation(fields: [session_id], references: [id])

  @@map("lifting_sets")
}

// Notes made for a movement on a specific date. It could be notes on how to improve the movement
// form, reminders for next sessions such as increase weight, etc.
model MovementNote {
  id          Int      @id @default(autoincrement())
  notes       String   @db.Text
  date        DateTime @default(now())
  movement_id Int

  movement Movement @relation(fields: [movement_id], references: [id])

  @@map("movement_notes")
}

// General notes to show on graphs.
// User will create notes to mark events on their graphs, such as a change of
// diet, a resting period due to injuries, etc. This way they can track, for example,
// if a diet is really affecting their weight loss.
model Note {
  id       Int      @id @default(autoincrement())
  notes    String   @db.Text
  date     DateTime
  priority Int      @default(1)

  user_email String @db.VarChar(255)
  user       User   @relation(fields: [user_email], references: [email])

  @@map("notes")
}
